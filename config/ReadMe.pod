=head1 SEEDtk Project Notes

This file contains important notes about the SEEDtk programming environment.

=head1 Directory Configuration

The SEEDtk system is designed for development in two distinct environments-- as
an Eclipse workspace on a single-user PC, and as a directory tree on a Unix
server.

The project is divided into multiple I<modules>. Each module has a B<lib>
subdirectory containing PERL modules and a B<script> subdirectory containing
PERL scripts.

In addition to the modules, there is the I<project directory> containing utilities
and files related to setup and configuration, the I<web directory> containing a
web site used to assist in development, and the I<data directory> containing
default locations for data used in loading the database.

=head2 The Project Directory

The project directory is generally called C<seedtk> or some variation.
In the Unix environment, it is the root directory of the entire project.
The source modules are stored in the C<modules> subdirectory and the
data directory is in a subdirectory called C<Data>. In addition to these, the
project directory contains the following subdirectories.

=over 4

=item config

Configuration files. This includes the L<FIG_Config> file.

=item doc

Documentation directory.

=item template

Templates used by the setup and configuration tools.

=item tools

Unix scripts for facilitating configuration and maintenance.

=back

There are also several files in the project directory root that
are used in deployment and setup.

=head3 FIG_Config

The structural information about the SEEDtk environment is kept in the L<FIG_Config> file
in the B<config> subdirectory of the project directory.

The information in the L<FIG_Config> is used to generate helper files and scripts, as
well as to specify defaults in various parts of the L<ERDB> system. When it changes,
you must run L<Config.pl> to update your environment. The B<@modules> variable
contains a list of the modules installed on your system. This is used to configure
your path and your list of PERL include libraries. L<Config.pl> will insure the
core modules required to run the system are always included in this list.

In Windows, you can direct L<Config.pl> to write environment information to the
system registry. If this is the case, you must reboot the system to access the
new information. In an Eclipse configuration, you can direct L<Config.pl> to update
your virtual hosts file. In this case, you must restart the local web server.

=head2 The Data Directory

The default data directory structure includes two main folders.

=over 4

=item Inputs

The default holding place for data to be loaded into the database. Genome
directories are stored in C<Inputs/GenomeData> and subsystem directories in
C<Inputs/SubSystemData>.

=item LoadFiles

The storage directory for the files used to load the database.

=back

These directories are the assumed defaults when doing database loads and
exports; however, they can always be overridden from the command line.
(See L<Shrub/new_for_script> for more information about the standard
database command-line options.)

There is also a data directory associated with the database. The DNA
sequences are kept in FASTA files in a directory called the I<DNA
repository>. This directory belongs with the database, so a single
directory is shared by all users of the same database. When you change
databases, you must also change the DNA repository to match.

=head2 The Web Directory

The web directory contains files that produce a web site with useful development
features. In an Eclipse environment, the web site is configured at the
address C<fig.localhost>. To make sure this address works, some DNS configuration
is required. Unfortunately, for security reasons this can only be done manually.
The web site requires a great deal of setup, so its use is entirely optional; however,
it provides the benefits of easy access to the POD documentation and configuration
data.

=head3 SEEDTK CODE Facility

The main page has a list of search boxes including one labeled C<SEEDTK CODE>.
Type the name of a perl module in this box, or the name of a script (including
the C<.pl> suffix) to see the relevant POD documentation.

The buttons below the box have the following functions.

=over 4

=item Links

Display B<Links.html>, a page of useful web links. You can edit this file yourself,
but a default is generated by L<Configure.pl>.

=item DBD

Display the Shrub database design. This is the active design for the main database;
however, at some point we hope to be able to directly display other DBDs, too.

=item Methods

Display a page containing forms that help to generate method documentation and
show certain data structures.

=item Scripts

Display a list of command-line scripts and their functions.

=item ENV

Display the environment variables.

=item Config

Display the configuration variables and their values.

=back

=head2 The DNA Repository

Each database has a DNA Repository containing the DNA sequences for each genome. If you are
developing using a local database, then this should point to a local directory (usually
C<DnaRepo> in the data directory). If you are using a shared database, B<you must use the
repository belonging to that database>. The location of the DNA Repository is specified
in your L<FIG_Config> file, which is also where you specify the location of the database.
Both of these things can be overridden onthe command line when you invoke a database
application.

=head1 Setting up a Unix Environment

In the examples below, it will be assumed your user name is C<self>. Simply substitute your real username
when typing the commands.

First, you need a user name and password on GITHUB, and it must be an authorized contributor to the C<seedtk_test>
repository. To insure that you are appropriately identtified, tell GIT your name and EMAIL.

    git config user.name yourFullName
    git config user.email yourGitHubEmail

Position in your home directory with the B<bash> shell active.

Clone the repository using GIT.

    git clone https://self@github.com/seedtk/seedtk.git SEEDtk

You will be prompted for a password. A new directory C<SEEDtk> will be created at the current
location and the SEEDtk files will be loaded into it. Note that you can specify a different
target directory as the last parameter. If you do, make the appropriate changes to the example
code below.

If you have an SSH key stored on GITHUB, you can use the SSH protocol instead.

    git clone git@github.com:SEEDtk/seedtk.git SEEDtk

At this point I recommend changing to the SEEDtk directory, as it simplifies most of the paths
you'll have to type.

    cd SEEDtk

Now type

    seedtk-setup

which will download the rest of the core projects from GITHUB and bootstrap the environment.

Next you need to create the data and web directories.

    mkdir Data /homes/self/public_html/SEEDtk

Activate the environment by typing

    source user-env.sh

We are now ready to bootstrap the system using the L<Config.pl> script. Type

    Config --dirs --dna=/homes/parrello/DnaRepo Data /homes/self/public_html/SEEDtk

Here C<Data> should be your data directory, and C</homes/self/public_html/SEEDtk> your web
directory.

Now exit from bash. From this point on, to get yourself into a SEEDtk environment, you simply type

    bash
    cd SEEDtk
    source user-env.sh

where as before C<self> is your user name. You can now enter batch commands. To test your installation, type

    ShowEcRoles

You should get a long list of roles and EC numbers. This verifies that you are connected to the
database properly.

=head2 Notes on L<Config.pl>

The L<Config.pl> script is one you will use frequently to insure your environment is up-to-date,
but once the environment is active you will not need to type as many options as you did during
configuration. Most of the time you'll just enter

    Config

directly and everything will be fixed up automatically. You will not need to do this every time you
change the code, only when you update L<FIG_Config> or an environment change is
made to the system as a whole.

=head2 Using Git in Unix

There is a GIT project for the project directory, one for the web directory, and one for each module.
For each repository, there is a local copy on your hard drive and a shared copy in GITHUB. The local
copy serves as backup and project history. The shared copy allows you to synchronize your work with
other members of the project.

Saving your work locally is called I<committing>. Sharing your work on GITHUB is called I<pushing>.
Getting updates from the shared project is called I<pulling>. Note that because of the large number
of projects, it takes several pull operations to synchronize the whole project. The L<seedtk_pull.pl>
script can be used to pull all the projects at once.

Before you do anything, your local repository should be in a committed state. To check the state of
a project, go to its directory and use

    git status -v

which will tell you what has changed since your last commit. To commit your changes, use

    git commit -a -m "commit message"

where C<commit message> is a brief description of your changes. YOU MUST NEVER FORGET TO ADD THE
MESSAGE. If you do, you will be forced to use the VI editor as punishment.

Once your repository is in a committed state, you can get the latest changes for this project from the shared
repository using

    git pull

Sometimes this may reveal merge conflicts. This will require editing the file to resolve the conflicts,
after which you must re-add the file to the index

    git add path/to/file

and then commit again.

To push your changes to the repository, use

    git push

Sometimes you will get a C<Forbidden> error. The most common causes of this error are

=over 4

=item 1

The shared repository has changed recently and you have to do B<pull> first.

=item 2

You have uncommitted changes in your local repository.

=item 3

You typed the wrong password.

=back

There are numerous other features and capabilities in GIT; however, these will get you through almost all
of the tasks you need to do.

=head1 Setting Up an Eclipse Environment

In Eclipse, the directory structure is very different. Each module is in its own private directory,
and must be imported as a separate project.

=cut

##TODO Document Eclipse setup procedure

1;